'#energy ball

type arcData_t
    as integer arcID
    as Vector2D bPos
    as Vector2D endPos
end type

type ITEM_DATA
    as integer body_i
    as integer lastCollide
    as TinyBody body
    as integer flashTimer
    as arcData_t ptr arcs
    as integer arcs_n
    as integer soundTimer
end type
#define MAX_RAYCAST_ATTEMPTS 10
#define RAYCAST_DIST 150

parameter "takeCamera", integer
publish slot "explosion reaction", $react, Circle2D(Vector2D(0,0), 17)

'---------------------------------

function _init()

    data.soundTimer = 0
    data.flashTimer = 0
    data.lastCollide = 0
    data.body = TinyBody(p, 16, 10)
    data.body.elasticity = 0.2
    data.body.friction = 0.5
    data.body.f += Vector2D(0, -DEFAULT_GRAV)*data.body.m*0.75
    data.body_i = link.tinyspace_ptr->addBody(@(data.body))

    CREATE_ANIMS(1)
    
    anims[0].load(MEDIA_PATH + "balllaunch2.txt")
    PREP_LIGHTS(MEDIA_PATH + "Lights\BrightWhite_Diffuse.txt", MEDIA_PATH + "Lights\BrightWhite_Specular.txt", 0)  

    data.arcs_n = 0
    data.arcs = new arcData_t[2]
    
end function

'---------------------------------

function _flush()
    link.tinyspace_ptr->removeBody(data.body_i)
 
end function

'---------------------------------

function _draw(scnbuff as integer ptr)
        
    anims[0].setGlow(&h6fffffff)
    anims[0].drawAnimation(scnbuff, p.x+(int(rnd * 7) - 3), p.y+(int(rnd * 7) - 3))

    anims[0].setGlow(&hffffffff)
    anims[0].drawAnimation(scnbuff, p.x, p.y)
    
    anims[0].setGlow(&h5fffffff)
    anims[0].drawAnimation(scnbuff, p.x+(int(rnd * 5) - 2), p.y+(int(rnd * 5) - 2))
end function
'----------------------------------

function _drawOverlay(scnbuff as integer ptr)

end function

'----------------------------------

function _run(t as double)
    dim as integer takeCamera
    dim as integer i
    dim as double randAngle, dist
    dim as Vector2D v, pt, nv
    anims[0].step_animation()
    
    getParameter(takeCamera, "takeCamera")
    p = data.body.p
    
    
    DControl->setTargetSlotOffset(ID, "explosion reaction", p) 

    if link.gamespace_ptr->lockCamera = 0 andAlso takeCamera = 1 then
        link.gamespace_ptr->camera = p * 0.1 + link.gamespace_ptr->camera * 0.9
    end if
    
    if int(rnd * 30) = 0 then
        data.flashTimer = int(rnd * 4) + 5
        for i = 0 to data.arcs_n - 1
            link.electricarc_ptr->destroy(data.arcs[i].arcID)
        next i
        data.arcs_n = 0  
        if data.arcs_n < 2 then
            for i = 0 to MAX_RAYCAST_ATTEMPTS - 1
                randAngle = rnd*(_PI_*2)
                v = Vector2D(cos(randAngle), sin(randAngle))*RAYCAST_DIST
                dist = link.tinyspace_ptr->raycast(p, v, pt)
                if dist >= 0 then
               
                    data.arcs[data.arcs_n].arcID = link.electricarc_ptr->create()
                    data.arcs[data.arcs_n].bPos = Vector2D(0, 0)
                    data.arcs[data.arcs_n].endPos = pt
                    link.electricarc_ptr->setPoints(data.arcs[data.arcs_n].arcID, p + data.arcs[data.arcs_n].bPos, pt)

                    data.arcs_n += 1
                    if data.arcs_n = 2 then exit for
                end if
            next i
        end if
    end if
    
    
    for i = 0 to data.arcs_n - 1
        link.electricarc_ptr->setPoints(data.arcs[i].arcID, p + data.arcs[i].bPos, data.arcs[i].endPos)
    next i
    if data.flashTimer > 0 then
        lightState = 1
        data.flashTimer -= 1
        anims[0].play()
    else
        for i = 0 to data.arcs_n - 1
            link.electricarc_ptr->destroy(data.arcs[i].arcID)
        next i
        data.arcs_n = 0
        lightState = 0
        anims[0].restart()
        anims[0].pause()
    end if
 
    if data.body.didCollide andAlso data.lastCollide = 0 then
        v = link.tinyspace_ptr->getGroundingNormal(data.body_i, Vector2D(0, -1), Vector2D(0, -1), -1)
        for i = 0 to 20
            nv = Vector2D((rnd * 2 - 1), (rnd * 2 - 1))
            nv.normalize
            link.projectilecollection_ptr->create(p + -v*17, nv*100, BLUE_SPARK)
        next i
        data.flashTimer = 6
        if data.soundTimer = 0 then 
            link.soundeffects_ptr->playSound(SND_GLASSTAP)
            data.soundTimer = 10
        end if
    end if
    
    if data.soundTimer > 0 then data.soundTimer -= 1

    data.lastCollide = data.body.didCollide
    data.body.didCollide = 0
    
    light.texture.x = p.x
    light.texture.y = p.y
    light.shaded.x = light.texture.x
    light.shaded.y = light.texture.y  
    
end function

'-----------------------------------

slot $react(source as Vector2D)
    dim as Vector2D v
    dim as double mag
    v = source - p
    mag = v.magnitude()
    
    v.normalize()
    
    mag = 150 - mag
    if mag < 0 then mag = 0
    mag /= 150.0
    
    
    data.body.v -= (v * mag) * 300
    

end slot

