'#puzzle tube 1


type bubble_t
    as Vector2D p
    as Vector2D v
    as double   size
    as integer  exists
end type

type ITEM_DATA
    as double tubeLevel 
    as integer isLocked
    as integer targetLevel
    as integer drawLevel
    as bubble_t ptr bubbles
end type

#define MAX_BUBBLES 20

publish value "level", integer
signal $failure

'---------------------------------

function _init()
    dim as integer i

    data.tubeLevel = 0
    data.targetLevel = 0
    data.isLocked = 0
    data.bubbles = new bubble_t[MAX_BUBBLES]
    for i = 0 to MAX_BUBBLES - 1
        data.bubbles[i].exists = 0
    next i

    setValue(0, "level")
    
    
    CREATE_ANIMS(3)
    anims[0].load(MEDIA_PATH + "teleportertubes.txt")
    anims[1].load(MEDIA_PATH + "teleportertubes.txt")
    anims[1].hardSwitch(1)
    anims[2].load(MEDIA_PATH + "teleportertubes.txt")
    anims[2].hardSwitch(2)    
    

end function

'---------------------------------

function _flush()
    delete(data.bubbles)
end function

'---------------------------------

function _draw(scnbuff as integer ptr)
    dim as integer i
    
    data.drawLevel = 142 - data.tubeLevel * (142.0 / 20.0)
    anims[1].setClippingBoundaries(0, 16 + data.drawLevel, 0, 0)
    anims[1].drawAnimation(scnbuff, p.x, 17 + p.y + data.drawLevel,,,ANIM_TRANS)
    anims[1].setClippingBoundaries(0, 0, 0, 175)
    anims[1].drawAnimation(scnbuff, p.x, p.y + data.drawLevel,,,ANIM_TRANS)
    
    for i = 0 to MAX_BUBBLES - 1
        if data.bubbles[i].exists = 1 then
            circle scnbuff, (data.bubbles[i].p.x, data.bubbles[i].p.y), data.bubbles[i].size, rgb(110,180,255),,,,F
        end if
    next i
  
    bitblt_addRGBA_Clip(scnbuff, p.x - link.gamespace_ptr->camera.x + SCRX*0.5, p.y - link.gamespace_ptr->camera.y + SCRY*0.5, anims[2].getRawImage, 96, 0, 143, 191)   
    anims[0].drawAnimation(scnbuff, p.x, p.y,,,ANIM_TRANS)
end function

'----------------------------------

function _drawOverlay(scnbuff as integer ptr)

end function

function doBubbles(t as double)
    dim as integer i
    if int(rnd * 10) = 0 then
        for i = 0 to MAX_BUBBLES - 1
            if data.bubbles[i].exists = 0 then
                data.bubbles[i].exists = 1
                data.bubbles[i].p = p + Vector2D(10 + int(rnd * (size.x - 20)), size.y - int(rnd * 8) - 8)
                data.bubbles[i].v = Vector2D(0, -3)
                data.bubbles[i].size = int(rnd * 2) + 1
                exit for
            end if
        next i
    end if
    for i = 0 to MAX_BUBBLES - 1
        if data.bubbles[i].exists = 1 then
            data.bubbles[i].p += data.bubbles[i].v + vector2D(int(rnd * 3) - 1, 0)
            if data.bubbles[i].p.x < p.x + 10 then 
                data.bubbles[i].p.xs = p.x + 10
            elseif data.bubbles[i].p.x > p.x + size.x - 10 then 
                data.bubbles[i].p.xs =  p.x + size.x - 10
            end if
            if data.bubbles[i].p.y < (p.y + data.drawLevel + 15) then data.bubbles[i].exists = 0
        end if    
    next i
end function

'----------------------------------

function _run(t as double)
        
    if abs(data.tubeLevel - data.targetLevel) > 0.09 then
        if data.tubeLevel < data.targetLevel then
            data.tubeLevel += 0.1
        elseif data.tubeLevel > data.targetLevel then
            data.tubeLevel -= 0.1    
        end if
    else
        setValue(data.targetLevel, "level")
    end if
    if data.tubeLevel > 20.0000001 then          
        data.tubeLevel = 20
        data.targetLevel = 0
        throw($failure)
    end if
    doBubbles(t)
end function

'-----------------------------------

slot $activate(amount as integer)
    if data.isLocked = 0 then data.targetLevel += amount
end slot

slot $reset()
    if data.isLocked = 0 then data.targetLevel = 0
end slot

slot $lockUp()
    data.isLocked = 1
end slot

slot $setup(startLevel as integer)
    data.targetLevel = startLevel
end slot
