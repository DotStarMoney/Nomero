'#laser receiver

type ITEM_DATA
    as integer state
    as integer targetFrames
end type

parameter "facing", integer
publish slot "laser recieve", $recieve, Circle2D(Vector2D(0,32), 10)

'---------------------------------

function _init()
    data.state = 0
    CREATE_ANIMS(3)
    anims[0].load(MEDIA_PATH + "laser.txt")
    anims[0].hardSwitch(1)
    anims[1].load(MEDIA_PATH + "laser.txt")
    anims[1].hardSwitch(2)
    anims[2].load(MEDIA_PATH + "laser.txt")
    anims[2].hardSwitch(3)    
    
    data.targetFrames = 10
    
    
end function

'---------------------------------

function _flush()

end function

'---------------------------------

function _draw(scnbuff as integer ptr)
    PREP_LIT_ANIMATION()
    dim as integer facing, i
    dim as vector2d ptn
    getParameter(facing, "facing")
    
    select case facing
    case 0
        ptn = p + Vector2D(0, 16)
        DRAW_LIT_ANIMATION(0, ptn.x, ptn.y, 3, 0)           
    case 1
        ptn = p + Vector2D(0, size.y*0.5)
        DRAW_LIT_ANIMATION(0, ptn.x, ptn.y, 0, 0)     
    case 2
        ptn = p + Vector2D(0, 16)
        DRAW_LIT_ANIMATION(0, ptn.x, ptn.y, 1, 0) 
    case 3
        ptn = p + Vector2D(-32 + size.x, size.y*0.5)
        DRAW_LIT_ANIMATION(0, ptn.x, ptn.y, 4, 0)
    end select
    if data.state = 0 then
        select case facing
        case 0
            ptn = p + Vector2D(0, 16)
            anims[1].drawAnimation(scnbuff, ptn.x, ptn.y,,3)           
        case 1
            ptn = p + Vector2D(0, size.y*0.5)
            anims[1].drawAnimation(scnbuff, ptn.x, ptn.y,,0)           
        case 2
            ptn = p + Vector2D(0, 16)
            anims[1].drawAnimation(scnbuff, ptn.x, ptn.y,,1)           
        case 3
            ptn = p + Vector2D(-32 + size.x, size.y*0.5)
            anims[1].drawAnimation(scnbuff, ptn.x, ptn.y,,4)           
        end select    
    else
        select case facing
        case 0
            ptn = p + Vector2D(0, 16)
            anims[2].drawAnimation(scnbuff, ptn.x, ptn.y,,3)           
        case 1
            ptn = p + Vector2D(0, size.y*0.5)
            anims[2].drawAnimation(scnbuff, ptn.x, ptn.y,,0)           
        case 2
            ptn = p + Vector2D(0, 16)
            anims[2].drawAnimation(scnbuff, ptn.x, ptn.y,,1)           
        case 3
            ptn = p + Vector2D(-32 + size.x, size.y*0.5)
            anims[2].drawAnimation(scnbuff, ptn.x, ptn.y,,4)           
        end select      
    end if
    
end function

'----------------------------------

function _drawOverlay(scnbuff as integer ptr)
    
end function

'----------------------------------

function _run(t as double)
    if data.targetFrames > 0 then
        data.targetFrames -= 1
        data.state = 0
    else
        data.state = 1
    end if
    
    
end function

'-----------------------------------
slot $recieve()
    data.targetFrames = 10
end slot
