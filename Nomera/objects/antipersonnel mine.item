'#antipersonnel mine

type ITEM_DATA 
    as integer body_i
    as TinyBody body
    as integer death
    as integer freeFallingFrames
end type
#define BOMB_STICKYNESS 0
#define MINE_FREEFALL_MAX 30

parameter "orientation", integer
parameter "colorIndex", integer

'---------------------------------

function _init()
    dim as integer orientation
    data.body = TinyBody(p, 8, 10)
    data.death = 0
    data.freeFallingFrames = 0
    
    anims_n = 3
    anims = new Animation[anims_n]
    anims[0].load(MEDIA_PATH + "mines.txt")
    anims[1].load(MEDIA_PATH + "silhouette.txt")
    anims[2].load(MEDIA_PATH + "ledflash.txt")
    
    anims[0].hardSwitch(0)
    anims[1].hardSwitch(0)    
    
    if anims_n <> 0 then
        anims[2].hardSwitch(0)
        anims[0].play()
        anims[1].play()
        anims[2].play()
    end if
    data.body.friction = 20
    getParameter(orientation, "orientation")
    
    select case orientation
    case 0
        data.body.f = data.body.f + Vector2D(0, BOMB_STICKYNESS)
    case 1
        data.body.f = data.body.f + Vector2D(-BOMB_STICKYNESS, 0)
    case 2
        data.body.f = data.body.f + Vector2D(0, -BOMB_STICKYNESS)
    case 3
        data.body.f = data.body.f + Vector2D(BOMB_STICKYNESS, 0)
    end select    
    data.body_i = link.tinyspace_ptr->addBody(@(data.body))
end function

'---------------------------------

function _flush()
 
    link.tinyspace_ptr->removeBody(data.body_i)
end function

'---------------------------------

function _draw(scnbuff as integer ptr)
	anims[0].drawAnimation(scnbuff, p.x, p.y)
    
end function

'----------------------------------

function _drawOverlay(scnbuff as integer ptr)
    dim as integer colorIndex
    dim as integer col
    
    getParameter(colorIndex, "colorIndex")
    col = getIndicatorColor(colorIndex)
    
    anims[1].setGlow(col)
    anims[1].drawAnimation(scnbuff, data.body.p.x, data.body.p.y)
    anims[2].drawAnimation(scnbuff, data.body.p.x, data.body.p.y - 16)
    colorIndex += 1
    
    addColor col, &h101010
    drawStringShadow scnbuff, data.body.p.x - 20, data.body.p.y - 20, iif(colorIndex < 10, str(colorIndex), "0"), col

end function

'----------------------------------

function _run(t as double)
    dim as integer i
    
    p = data.body.p
    bounds_tl = anims[0].getOffset() + data.body.p
    bounds_br = bounds_tl + Vector2D(anims[0].getWidth(), anims[0].getHeight())
    
    anims[0].step_animation()
	anims[1].step_animation()
    anims[2].step_animation()
   
    if link.tinyspace_ptr->getArbiterN(data.body_i) = 0 then
        data.freeFallingFrames += 1
    else
        data.freeFallingFrames = 0
    end if
    
    if data.death orElse (data.freeFallingFrames >= MINE_FREEFALL_MAX) then
        data.death = 1 
        
        link.oneshoteffects_ptr->create(p + Vector2D(rnd * 16 - 8, rnd * 16 - 8),,,1)
        link.oneshoteffects_ptr->create(p + Vector2D(rnd * 16 - 8, rnd * 16 - 8),,,2)
        link.oneshoteffects_ptr->create(p + Vector2D(rnd * 64 - 32, rnd * 64 - 32),,,2)
        link.oneshoteffects_ptr->create(p + Vector2D(rnd * 64 - 32, rnd * 64 - 32),,,2)
        link.oneshoteffects_ptr->create(p, FLASH,,1)
        link.soundeffects_ptr->playSound(SND_EXPLODE)
        for i = 1 to 5
            link.projectilecollection_ptr->create(p, Vector2D(rnd*2 - 1.0, rnd*2 - 1.0) * (300 + rnd*700), DETRITIS)
        next i
        link.gamespace_ptr->vibrateScreen()
        link.level_ptr->addFallout(p.x, p.y)
        
    end if
           
    return data.death

end function

'-----------------------------------

slot $explode()

   data.death = 1

end slot
