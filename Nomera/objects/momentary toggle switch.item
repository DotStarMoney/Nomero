'#momentary toggle switch

type ITEM_DATA 
    as integer toggleCycle
end type

parameter "facing", integer
publish slot "interact", $interact, Rectangle2D(Vector2D(0,0), Vector2D(32, 48))
signal $activate

'---------------------------------

function _init()
    data.toggleCycle = 0
    
    anims_n = 3
    anims = new Animation[anims_n]
    anims[0].load(MEDIA_PATH + "switch.txt")
    anims[1].load(MEDIA_PATH + "switch.txt")
    anims[1].hardSwitch(1)
    anims[2].load(MEDIA_PATH + "switch.txt")
    anims[2].hardSwitch(2)
    
end function

'---------------------------------

function _flush()
 
end function

'---------------------------------

function _draw(scnbuff as integer ptr)
    dim as integer facing, flags
    PREP_LIT_ANIMATION()
    
    flags = 0
    getParameter(facing, "facing")
    if facing = -1 then 
        flags = 0
    elseif facing = 1 then
        flags = 4
    end if
    
    DRAW_LIT_ANIMATION(0, p.x, p.y + 16, flags, 0)
    DRAW_LIT_ANIMATION(1, p.x, p.y, flags, 0)
    anims[2].drawAnimation(scnbuff, p.x, p.y,,flags)
end function

'----------------------------------

function _drawOverlay(scnbuff as integer ptr)

end function

'----------------------------------

function _run(t as double)
    anims[1].step_animation()
    anims[2].step_animation()
    
    if data.toggleCycle > 0 then
        data.toggleCycle -= 1
        if data.toggleCycle = 1 then link.soundeffects_ptr->playSound(SND_CLACKDOWN)
    else
        anims[1].restart()
        anims[2].restart()    
    end if
end function

'-----------------------------------

slot $interact()
    if data.toggleCycle = 0 then
        data.toggleCycle = 30
        link.soundeffects_ptr->playSound(SND_CLACKUP)
        anims[1].play()
        anims[2].play()    
        throw($activate)
    end if
end slot
