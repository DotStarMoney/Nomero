'#freight elevator

type ITEM_DATA 
    as TinyDynamic ptr platformHi
    as TinyDynamic ptr platformLow
    as integer platformHi_i
    as integer platformLow_i
    as integer lastState
    as vector2D elevatorPos
    as integer gearSound
end type

parameter "startSide", integer
publish slot "interact", $interact, Rectangle2D(Vector2D(50,32), Vector2D(70, 52))
publish value "interact", integer

'---------------------------------

function _init()
    dim as TinyDynamic_BASICPATH pathData
    dim as Vector2D path(0 to 1) 
    dim as Vector2D shape(0 to 4)
    
    data.lastState = 0
    
    path(1) = p 
    path(0) = p + Vector2D(0, size.y - 96)
    
    pathData.pathPointsN = 2
    pathData.pathPoints = @(path(0))
    pathData.type_ = TOGGLE
    pathData.speed = 80
    pathData.segment = 0    
    pathData.segment_pos = 0
        
    data.platformHi = new TinyDynamic(DYNA_BASICPATH)
    data.platformLow = new TinyDynamic(DYNA_BASICPATH)
    data.platformHi->importParams(@pathData)
    data.platformLow->importParams(@pathData)
    
    shape(0) = Vector2D(0,0)
    shape(1) = Vector2D(96, 0)
    shape(2) = Vector2D(96, 9)
    shape(3) = Vector2D(0, 9)
    shape(4) = shape(0)
    data.platformHi->importShape(@(shape(0)), 5)
    shape(0) = Vector2D(0,80)
    shape(1) = Vector2D(96, 80)
    shape(2) = Vector2D(96, 96)
    shape(3) = Vector2D(0, 96)
    shape(4) = shape(0)
    data.platformLow->importShape(@(shape(0)), 5)
    data.platformHi->calcBB()
    data.platformLow->calcBB()
    data.platformHi->activate()
    data.platformLow->activate()
    
    data.platformHi_i = link.tinyspace_ptr->addDynamic(data.platformHi)
    data.platformLow_i = link.tinyspace_ptr->addDynamic(data.platformLow)
    
    anims_n = 4
    anims = new Animation[anims_n]
    anims[0].load(MEDIA_PATH + "elevator.txt")
    anims[0].play()
    anims[1].load(MEDIA_PATH + "elevator.txt")
    anims[1].hardSwitch(1)
    anims[1].play()
    anims[2].load(MEDIA_PATH + "elevator2.txt")
    anims[3].load(MEDIA_PATH + "elevator2.txt")
    anims[3].hardSwitch(1)
    anims[3].play()
    
    setValue(0, "interact")
    
end function

'---------------------------------

function _flush()
    
    link.tinyspace_ptr->removeDynamic(data.platformLow_i)  
    link.tinyspace_ptr->removeDynamic(data.platformHi_i)    
    delete(data.platformHi)
    delete(data.platformLow)
end function

'---------------------------------

function _draw(scnbuff as integer ptr)
    dim as integer interact
    dim as Vector2D startPos
    PREP_LIT_ANIMATION()
    
    DRAW_LIT_ANIMATION_BRIGHT(0, data.elevatorPos.x, data.elevatorPos.y, 0, 0)
    
    getValue(interact, "interact")
    if interact = 0 then anims[1].drawAnimation(scnbuff, data.elevatorPos.x + 55, data.elevatorPos.y + 36)
    
    startPos = vector2d(data.elevatorPos.x, _min_(data.elevatorPos.y - 16, link.gamespace_ptr->camera.y + SCRY*0.5 - 16))
    while startPos.y > (link.gamespace_ptr->camera.y - SCRY*0.5 - 16)
        if startPos.y > p.y then 
            anims[2].setClippingBoundaries(0,0,0,0)
            DRAW_LIT_ANIMATION(2, startPos.x, startPos.y, 0, 0)
            startPos.ys -= 16
        else
            anims[2].setClippingBoundaries(0,p.y - startPos.y,0,0)
            DRAW_LIT_ANIMATION(2, startPos.x, p.y, 0, 0)            
            exit while
        end if
    wend 
    
    DRAW_LIT_ANIMATION(3, data.elevatorPos.x, data.elevatorPos.y - 32, 0, 0)

end function

'----------------------------------

function _drawOverlay(scnbuff as integer ptr)

    
end function

'----------------------------------

function _run(t as double)
    data.elevatorPos = data.platformHi->getPointP(0)
    
    DControl->setTargetSlotOffset(ID, "interact", data.elevatorPos) 
    if data.platformHi->getToggleState > 1 then
        setValue(-1, "interact")
        anims[3].play()
    else
        if data.lastState > 1 then 
            link.soundeffects_ptr->playSound(SND_COLLIDE)
            link.soundeffects_ptr->stopSound(data.gearSound)            
        end if
        setValue(0, "interact")
        anims[3].pause()
    end if
    
    data.lastState = data.platformHi->getToggleState
    
    anims[3].step_animation()
    
end function

'-----------------------------------

function togglePath()
    link.soundeffects_ptr->playSound(SND_SELECT)
    data.gearSound = link.soundeffects_ptr->playSound(SND_GEARS)
    data.platformLow->togglePath()
    data.platformHi->togglePath()
end function

slot $interact()
    togglePath()
end slot


